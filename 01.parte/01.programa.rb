# p001ola.rb
puts 'olow'

# p002numerosruby.rb
=begin
    NÃºmeros Ruby
    Operadores comuns:
    + adiÃ§Ã£o
    - subtraÃ§Ã£o
    * multiplicaÃ§Ã£o
    / divisÃ£o
=end

puts 1 + 2
puts 2 * 3

puts 3 / 2
puts 10 - 11
puts 1.5 / 2.6

puts (5 % 3)
puts (-5 % 3)
puts (5 % -3)
puts (-5 % -3)

puts nil || 2008 # || or OR
puts false || 2008
puts 'ruby' || 2008

# #tricks
# @variavel = @variavel || 'valor padrÃ£o'
# # ||
# @variavel ||= 'valor padrÃ£o'

# if a = f(x) and b = f(y) and c = f(z) then d = g(a,b,c) end


# p003stringruby.rb
=begin
    strings ruby
    em ruby, strings sÃ£o mutÃ¡veis
=end

puts "olÃ¡ mundo"
puts 'olÃ¡ mundo'
puts 'eu gosto de ' + 'ruby'
puts 'it\'s my ruby'
puts 'olÃ¡' * 3
puts 'ğŸ¥‡' * 3
PI = 3.1416
puts PI

puts `ls`

# system('tar xzf teste.tgz')

s = 'OlÃ¡ mundo!'
x = 10

minha_string = 'Eu amo minha cidade'
puts minha_string

=begin
    conversÃµes
    .to_i, .to_f, .to_s
=end
var1 = 5
var2 = '2'
puts var1 . var2.to_i

a = 'olÃ¡ '
a << 'mundo'
puts a

=begin 
    << marca o inÃ­cio de seu literal string e
    Ã© seguido por um delimitador de sua escolha.
    O literal string inicia entÃ£o na prÃ³xima linha
    e termina quando o delimitador Ã© repetido em
    uma linha onde ele aparece sozinho.
    Isso Ã© conhecido como "Here document syntax".
a = << FIM_STR  
Essa Ã© a string  
E uma segunda linha  
FIM_STR  
puts a
=end  